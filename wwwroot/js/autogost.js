import {EditorView, basicSetup} from "codemirror"
import {EditorState, EditorSelection} from "@codemirror/state"
import {autocompletion} from "@codemirror/autocomplete"
import {keymap} from "@codemirror/view"
import {tags} from "@lezer/highlight";
import {
    LanguageSupport,
    StreamLanguage,
    StringStream,
    HighlightStyle,
    syntaxHighlighting
} from "@codemirror/language";

// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
async function uploadImage(file) {
    const fd = new FormData();
    fd.append('file', file);

    const response = await fetch("http://localhost:9000/autogost/upload-image", {
        method: 'post',
        body: fd
    });
    return response;
}

// caretAt –º–∞—Ä–∫–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –¥–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
// start - –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ –≤—Å—Ç–∞–≤–∫–∏
// filename - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
// label - –ø–æ–¥–ø–∏—Å—å
function pasteImageMarker(caretAt, filename, label='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ') {
    // –¢–µ–∫—Å—Ç —Å—Ç—Ä–æ–∫–∏ —Å –∫—É—Ä—Å–æ—Ä–æ–º
    const lineText = editor.state.doc.lineAt(caretAt).text;

    console.log(lineText);

    let prefix;
    if (lineText.length == 0) {
        // –≠—Ç–æ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –º–æ–∂–Ω–æ –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –∫—É—Ä—Å–æ—Ä –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        prefix = '';
    } else {
        prefix = '\n';
    }

    const line = prefix+"@img:"+filename+":"+label;
    
    editor.dispatch({
        changes: {
            from: caretAt,
            insert: line
        }
    });

    // –ü–µ—Ä–µ–Ω–æ—Å –∫—É—Ä—Å–æ—Ä–∞
    const newPos = caretAt + line.length;
    editor.dispatch({
        selection: EditorSelection.single(newPos)
    });
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ HTML
async function getHTML(report_id) {
    const response = await fetch("http://localhost:9000/autogost/gethtml", {
        method: "post",
        body: JSON.stringify({report_id: report_id})
    });
    return response;
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –æ—Ç—á—ë—Ç–∞
async function getMarkup(report_id) {
    const response = await fetch("http://localhost:9000/reports/get", {
        method: "post",
        body: JSON.stringify({id: report_id})
    });
    return response;
}

// –û–±–Ω–æ–≤–ª—è–µ—Ç #preview –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –æ—Ç—Å—ã–ª–∞—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ HTML
// –ù–ï –°–û–•–†–ê–ù–Ø–ï–¢ –†–ê–ó–ú–ï–¢–ö–£
async function updatePreview(onSuccess) {
    const response = await getHTML(PHP_report_id);

    if (response.ok) {
        const data = await response.text();
        previewOut.innerHTML = data;
        onSuccess();
        console.log("Updating preview finished successfully");
    } else {
        console.error("Error when generating preview");
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
function toggleSidebar() {
    sidebarOpened = !sidebarOpened;
    if (sidebarOpened) {
        openSidebar();
    } else {
        closeSidebar();
    }
}

// –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
function openSidebar() {
    sidebar.classList.add("sidebarOpen");
    content.classList.add("contentShifted");
    btnSidebarToggle.textContent = "‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤";
}

// –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
function closeSidebar() {
    sidebar.classList.remove("sidebarOpen");
    content.classList.remove("contentShifted");
    btnSidebarToggle.textContent = "üìñ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤";
}

// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤ —Ä–µ–∂–∏–º "–ó–∞–≥—Ä—É–∑–∫–∞"
function editorToLoader() {
    editorLoader.classList.remove('hidden');
}

// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤ —Ä–µ–∂–∏–º "–ü—Ä–µ–≤—å—é"
async function editorToPreview() {
    // –û—Ç–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É
    btnToPreview.blur();

    // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    previewOut.classList.add('hidden');
    editorToLoader();

    // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    lblAddImage.setAttribute("disabled", "disabled");	

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–µ–∫—Ü–∏–π
	editorSection.classList.add("hidden");
	previewSection.classList.remove("hidden");
	btnToMarkup.classList.remove('border-accent');
	btnToPreview.classList.add('border-accent');

	// 1. –†–∞–∑–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
	// 2. –ü—Ä–µ–≤—å—é –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
    // 3.1 –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    // 3.2 –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
	await saveMarkup(async function() {
		await updatePreview(function() {
            editorLoader.classList.add('hidden');
            previewOut.classList.remove('hidden');
		});
	});
}

// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤ —Ä–µ–∂–∏–º "–†–∞–∑–º–µ—Ç–∫–∞"
async function editorToMarkup() {
    btnToMarkup.blur();
	btnToPreview.classList.remove('border-accent');
	btnToMarkup.classList.add('border-accent');
	editorSection.classList.remove("hidden");
	previewSection.classList.add("hidden");
	lblAddImage.removeAttribute("disabled");
    previewOut.classList.add('hidden');
    editorLoader.classList.add('hidden');
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏
async function saveMarkup(successCallback) {
    const response = await fetch("http://localhost:9000/reports/update", {
        method: "post",
        body: JSON.stringify(
            {id: PHP_report_id, markup: editor.state.doc.toString()}
        )
    });

    if (response.ok) {
        unsavedChanges = true;
        btnSave.blur();
        console.log("Markup saved");
        if (successCallback) {
            successCallback();
        }
        return;
    }

    console.error("Failed to save markup");
}

// –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
function autogostCompletions(context) {
    let before = context.matchBefore(/^@\w*/);
    if (!context.explicit && !before) {
        return null;
    }
    return {
        from: before ? before.from : context.pos,
        options: completions,
        validFor: /^\w*$/
    }
}

// –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
let sidebarOpened       = true;
const sidebar           = document.getElementById('agstControls');
const content           = document.getElementById('agstMain');
const btnSidebarToggle  = document.getElementById('btnToggleSidebar');

// –ö–Ω–æ–ø–∫–∏ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
const btnToPreview 	= document.getElementById("switchPreview");
const btnToMarkup 	= document.getElementById("switchMarkup");
const btnAddImage 	= document.getElementById("btnAddImage");
const lblAddImage 	= document.getElementById("lblAddImage");
const loaderAddImage= document.getElementById("loaderAddImage");
const btnPrint 		= document.getElementById("printReport");
const btnFilename 	= document.getElementById("getFilename");
const btnSave 		= document.getElementById("saveMarkupButton");

// –†–µ–¥–∞–∫—Ç–æ—Ä
const previewSection= document.getElementById("agstPreview");
const editorSection	= document.getElementById("agstEditor");
const previewOut 	= document.getElementById("agstOutput");
const editorLoader  = document.getElementById('agstLoader');
let unsavedChanges  = false;

// -- –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π --
btnSidebarToggle.onclick = async function(e) {
    toggleSidebar();
    btnSidebarToggle.blur();
}
btnToPreview.onclick = async function(e) {
    await editorToPreview();
}
btnSave.onclick = async function(e) {
    saveMarkup(function() {
        btnSave.blur();
    });
}
btnToMarkup.onclick = async function(e) {
    await editorToMarkup();
}
btnAddImage.onchange = async function(e) {
    if (!e.target.files[0]) {
        return;
    }
    loaderAddImage.classList.remove('hidden');

    let response;           // –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    let data;               // –î–∞–Ω–Ω—ã–µ JSON –æ—Ç–≤–µ—Ç–∞
    let currentImageNum = 1;// –ù–æ–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    for (const f of e.target.files) {
        // –§–∞–π–ª - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?
        if (f.type.split('/')[0] !== 'image') {
            // –ù–µ—Ç -- –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue;
        }

        response = await uploadImage(f);
        data = await response.json();

        if (!data.ok) {
            console.error('Failed to upload image!');
            continue;
        }
        
        pasteImageMarker(
            editor.state.selection.main.head,
            data.filename,
            "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"+currentImageNum
        );
        currentImageNum++;
    }
    loaderAddImage.classList.add('hidden');
}
btnPrint.onclick = function() {
    // –ü—Ä–∏ –ø–µ—á–∞—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É, –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é, –∞ –ø–æ—Ç–æ–º –≤—ã–∑—ã–≤–∞–µ–º
    // window.print
    saveMarkup(function() {
        updatePreview(function() {
            window.print();
        });
    });
}
// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
btnFilename.onclick = async function() {
	await navigator.clipboard.writeText(PHP_filename);
}

// ===CODEMIRROR===
let editor;
editorToLoader();

// –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
const completions = [
    {label: "@titlepage", type: "keyword", info: "–¢–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"},
    {label: "@section:–ù–∞–∑–≤–∞–Ω–∏–µ", type: "keyword", info: "–°–µ–∫—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏"},
    {label: "@-", type: "keyword", info: "–†–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"},
    {label: "@img:–ò—Å—Ç–æ—á–Ω–∏–∫:–ü–æ–¥–ø–∏—Å—å", type: "keyword", info: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"},
    {label: "@\\", type: "keyword", info: "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"},
    {label: "@raw", type: "keyword", info: "–ù–∞—á–∞–ª–æ —á–∏—Å—Ç–æ–≥–æ HTML"},
    {label: "@endraw", type: "keyword", info: "–ö–æ–Ω–µ—Ü —á–∏—Å—Ç–æ–≥–æ HTML"},
    {label: "@@:–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", type: "keyword", info: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"},
];

// –°–æ–±—ã—Ç–∏—è DOM —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—Ç–∫–∏
let editorEventHandlers = {
    // –í—Å—Ç–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    // https://stackoverflow.com/a/6338207
    paste: function(e, ed) {
        let items = (e.clipboardData || e.originalEvent.clipboardData).items;
        for (let index in items) {
            let item = items[index];

            // –≠—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤—Å—Ç–∞–≤–∫–∏ - –Ω–µ —Ñ–∞–π–ª
            if (item.kind !== 'file') {
                continue;
            }

            uploadImage(item.getAsFile());
        }
        return false;
    }
}

// –¢–µ–º–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
const
    ivory = "#b6c3cf",
    background = "#3B3B3B",
    cursor = "#E6E6FA",
    selection = "#2f5692",
    darkBackground = "#303030",
    stone = "#7d8799";
    
    
let agstTheme = EditorView.theme({
    "&": {
    color: ivory,
    backgroundColor: background
    },

    ".cm-content": {
        caretColor: cursor
    },

    ".cm-cursor, .cm-dropCursor": {borderLeftColor: cursor},
    "&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": {backgroundColor: selection},

    ".cm-searchMatch": {
        backgroundColor: "#C9BD3E",
        outline: "2px solid #FF804C"
    },

    ".cm-activeLine": {backgroundColor: "#4343437f"},
    ".cm-selectionMatch": {backgroundColor: "#aafe661a"},

    ".cm-gutters, .cm-activeLineGutter": {
        backgroundColor: darkBackground,
        color: stone,
        border: "none"
    },
}, {dark: true});

// –¢–µ–º–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
let agstHighlightStyle = HighlightStyle.define([
    {tag: tags.keyword, color: "#d58a4a"},
    {tag: tags.separator, color: "#b6c3cf"},
    {tag: tags.attributeValue, color: "#edc881"},
    {tag: tags.labelName, color: "#a88ab6"}
]);

// –Ø–∑—ã–∫
const AgstLanguage = StreamLanguage.define({
    name: "Autogost",
    startState: () => {
            return {lineKeyword: false, arg: false, argNum: 0}
    },
    token: function(stream, state) {

        // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:
        // @titlepage, @section, @- ...
        if (stream.match(/^@(\w|-|\\)*$/)) {
            return "keyword";
        }

        // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö –∏–¥—É—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if (stream.match(/^@(\w|-|\\)*/)) {
            state.lineKeyword = true;
            return "keyword";
        }

        // –î–≤–æ–µ—Ç–æ—á–∏–µ –≤ –∫–æ–Ω—Ü–µ
        if (state.lineKeyword && stream.match(/^:$/)) {
            state.lineKeyword = false;
            state.argNum = 0;
            return "separator";
        }

        // –î–≤–æ–µ—Ç–æ—á–∏–µ
        if (state.lineKeyword && stream.match(/^:/)) {
            state.argNum++;
            return "separator";
        }

        // –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
        if (state.lineKeyword && stream.match(/^[^:]*$/, true, true)) {
            let output;

            if (state.argNum == 1) {
                output = "attributeValue";
            } else {
                output = "labelName";
            }

            state.lineKeyword = false;
            state.argNum = 0;
            
            return output;
        }

        // –ù–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
        if (state.lineKeyword && stream.match(/^[^:]*/, true, true)) {
            if (state.argNum == 1) {
                return "attributeValue";
            }
            return "labelName";
        }

        stream.skipToEnd();
        return null;
    }
});

getMarkup(PHP_report_id).
then(async function(response) {
    let responseData = await response.json();
    let initialMarkup = responseData['markup'];

    let cmEditorState = EditorState.create({
        doc: initialMarkup,
        extensions: [
            basicSetup,
            EditorView.lineWrapping,
            autocompletion({override: [autogostCompletions]}),
            keymap.of([{
                key: "Ctrl-s",
                run() { saveMarkup(null); return true }
            }]),
            EditorView.domEventHandlers(editorEventHandlers),
            agstTheme,
            syntaxHighlighting(agstHighlightStyle),
            new LanguageSupport(AgstLanguage)
        ],
    });

    // CodeMirror init
    editor = new EditorView({
        state: cmEditorState,
        lineWrapping: true,
        parent: editorSection
    });

    // –°–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑—á–∏–∫
    editorLoader.classList.add('hidden');
    
});